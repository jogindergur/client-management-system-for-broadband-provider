/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

package interface_output;

import java.awt.Cursor;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.text.MessageFormat;
import java.util.Calendar;
import java.util.GregorianCalendar;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.ImageIcon;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Furkan
 */
public class Calculations extends javax.swing.JFrame {

        /**
         * Creates new form Calculations
         */
        int mX,mY;
        public Calculations() {
                initComponents();
                ImageIcon img=new ImageIcon("img\\cms.png");
                this.setIconImage(img.getImage());
        year.setSelectedItem(String.valueOf(y));
        month.setSelectedIndex(m+1);
        move.setCursor(new Cursor(Cursor.MOVE_CURSOR));
        exit.setCursor(new Cursor(Cursor.HAND_CURSOR));
        min.setCursor(new Cursor(Cursor.HAND_CURSOR));
        print.setCursor(new Cursor(Cursor.HAND_CURSOR));
        work2();
        search();
        }

        /**
         * This method is called from within the constructor to initialize the
         * form. WARNING: Do NOT modify this code. The content of this method is
         * always regenerated by the Form Editor.
         */
        @SuppressWarnings("unchecked")
        // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
        private void initComponents() {

                exit = new javax.swing.JLabel();
                min = new javax.swing.JLabel();
                move = new javax.swing.JLabel();
                month = new javax.swing.JComboBox();
                year = new javax.swing.JComboBox();
                jScrollPane1 = new javax.swing.JScrollPane();
                historyBills = new javax.swing.JTable();
                cid = new javax.swing.JTextField();
                taka = new javax.swing.JLabel();
                jLabel1 = new javax.swing.JLabel();
                print = new javax.swing.JLabel();
                bg = new javax.swing.JLabel();

                setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
                setUndecorated(true);
                getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

                exit.addMouseListener(new java.awt.event.MouseAdapter() {
                        public void mouseClicked(java.awt.event.MouseEvent evt) {
                                exitMouseClicked(evt);
                        }
                });
                getContentPane().add(exit, new org.netbeans.lib.awtextra.AbsoluteConstraints(680, 0, 35, 30));

                min.addMouseListener(new java.awt.event.MouseAdapter() {
                        public void mouseClicked(java.awt.event.MouseEvent evt) {
                                minMouseClicked(evt);
                        }
                });
                getContentPane().add(min, new org.netbeans.lib.awtextra.AbsoluteConstraints(640, 0, 35, 30));

                move.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
                        public void mouseDragged(java.awt.event.MouseEvent evt) {
                                moveMouseDragged(evt);
                        }
                });
                move.addMouseListener(new java.awt.event.MouseAdapter() {
                        public void mousePressed(java.awt.event.MouseEvent evt) {
                                moveMousePressed(evt);
                        }
                });
                getContentPane().add(move, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 630, 20));

                month.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
                month.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Select", "Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec" }));
                month.addActionListener(new java.awt.event.ActionListener() {
                        public void actionPerformed(java.awt.event.ActionEvent evt) {
                                monthActionPerformed(evt);
                        }
                });
                getContentPane().add(month, new org.netbeans.lib.awtextra.AbsoluteConstraints(288, 60, 105, 32));

                year.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
                year.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Select", "2010", "2011", "2012", "2013", "2014", "2015", "2016", "2017", "2018", "2019", "2020", "2021", "2022", "2023", "2024", "2025", "2026", "2027", "2028", "2029", "2030", "2031", "2032", "2033", "2034", "2035", "2036", "2037", "2038", "2039", "2040", "2041", "2042", "2043", "2044", "2045", "2046", "2047", "2048", "2049", "2050", "2051", "2052", "2053", "2054", "2055", "2056", "2057", "2058", "2059", "2060", "2061", "2062", "2063", "2064", "2065", "2066", "2067", "2068", "2069", "2070", "2071", "2072", "2073", "2074", "2075", "2076", "2077", "2078", "2079", "2080", "2081", "2082", "2083", "2084", "2085", "2086", "2087", "2088", "2089", "2090", "2091", "2092", "2093", "2094", "2095", "2096", "2097", "2098", "2099" }));
                year.addActionListener(new java.awt.event.ActionListener() {
                        public void actionPerformed(java.awt.event.ActionEvent evt) {
                                yearActionPerformed(evt);
                        }
                });
                getContentPane().add(year, new org.netbeans.lib.awtextra.AbsoluteConstraints(70, 60, 110, 30));

                historyBills.setBackground(new java.awt.Color(0, 102, 102));
                historyBills.setModel(new javax.swing.table.DefaultTableModel(
                        new Object [][] {

                        },
                        new String [] {
                                "Sl", "Client ID", "Amount", "Bandwidth", "Which month", "Paying month"
                        }
                ) {
                        boolean[] canEdit = new boolean [] {
                                false, false, false, false, false, false
                        };

                        public boolean isCellEditable(int rowIndex, int columnIndex) {
                                return canEdit [columnIndex];
                        }
                });
                historyBills.setToolTipText("Search view by paying date");
                historyBills.setGridColor(new java.awt.Color(153, 153, 255));
                historyBills.setSelectionForeground(new java.awt.Color(0, 0, 0));
                jScrollPane1.setViewportView(historyBills);

                getContentPane().add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(2, 108, 715, 335));

                cid.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
                cid.addKeyListener(new java.awt.event.KeyAdapter() {
                        public void keyReleased(java.awt.event.KeyEvent evt) {
                                cidKeyReleased(evt);
                        }
                });
                getContentPane().add(cid, new org.netbeans.lib.awtextra.AbsoluteConstraints(500, 60, 213, 33));

                taka.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
                taka.setForeground(new java.awt.Color(204, 0, 204));
                getContentPane().add(taka, new org.netbeans.lib.awtextra.AbsoluteConstraints(80, 450, 490, 30));

                jLabel1.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
                jLabel1.setForeground(new java.awt.Color(102, 255, 102));
                jLabel1.setText("Total :");
                getContentPane().add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 450, 60, 30));

                print.addMouseListener(new java.awt.event.MouseAdapter() {
                        public void mouseClicked(java.awt.event.MouseEvent evt) {
                                printMouseClicked(evt);
                        }
                });
                getContentPane().add(print, new org.netbeans.lib.awtextra.AbsoluteConstraints(610, 450, 110, 30));

                bg.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/calculations.png"))); // NOI18N
                getContentPane().add(bg, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 720, -1));

                pack();
                setLocationRelativeTo(null);
        }// </editor-fold>//GEN-END:initComponents

        private void exitMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_exitMouseClicked
                // TODO add your handling code here:
                this.dispose();
        }//GEN-LAST:event_exitMouseClicked

        private void minMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_minMouseClicked
                // TODO add your handling code here:
                this.setExtendedState(Cinfo.ICONIFIED);
        }//GEN-LAST:event_minMouseClicked

        private void moveMouseDragged(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_moveMouseDragged
                // TODO add your handling code here:
                int x=evt.getXOnScreen();
                int y=evt.getYOnScreen();
                this.setLocation(x-mX, y-mY);
        }//GEN-LAST:event_moveMouseDragged

        private void moveMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_moveMousePressed
                // TODO add your handling code here:
                mX=evt.getX();
                mY=evt.getY();
        }//GEN-LAST:event_moveMousePressed

        private void yearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_yearActionPerformed
         work2();
         search();
        }//GEN-LAST:event_yearActionPerformed

        private void monthActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_monthActionPerformed
        work2();
        search();
        }//GEN-LAST:event_monthActionPerformed

        private void cidKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_cidKeyReleased
         work2();
         search();
        }//GEN-LAST:event_cidKeyReleased

        private void printMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_printMouseClicked
         MessageFormat head=new MessageFormat(
            "**** History of Bills ****"
    );
     MessageFormat foot=new MessageFormat("Page{0, number,integer}");
     try{
         historyBills.print(JTable.PrintMode.NORMAL, head, foot);
     }catch(java.awt.print.PrinterException e)
     {
         JOptionPane.showMessageDialog(null, "Errors:"+e);
     }
        }//GEN-LAST:event_printMouseClicked

        /**
         * @param args the command line arguments
         */
        public static void main(String args[]) {
                /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
                 * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
                 */
                try {
                        for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                                if ("Nimbus".equals(info.getName())) {
                                        javax.swing.UIManager.setLookAndFeel(info.getClassName());
                                        break;
                                }
                        }
                } catch (ClassNotFoundException ex) {
                        java.util.logging.Logger.getLogger(Calculations.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
                } catch (InstantiationException ex) {
                        java.util.logging.Logger.getLogger(Calculations.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
                } catch (IllegalAccessException ex) {
                        java.util.logging.Logger.getLogger(Calculations.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
                } catch (javax.swing.UnsupportedLookAndFeelException ex) {
                        java.util.logging.Logger.getLogger(Calculations.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
                }
        //</editor-fold>

                /* Create and display the form */
                java.awt.EventQueue.invokeLater(new Runnable() {
                        public void run() {
                                new Calculations().setVisible(true);
                        }
                });
        }

        // Variables declaration - do not modify//GEN-BEGIN:variables
        private javax.swing.JLabel bg;
        private javax.swing.JTextField cid;
        private javax.swing.JLabel exit;
        private javax.swing.JTable historyBills;
        private javax.swing.JLabel jLabel1;
        private javax.swing.JScrollPane jScrollPane1;
        private javax.swing.JLabel min;
        private javax.swing.JComboBox month;
        private javax.swing.JLabel move;
        private javax.swing.JLabel print;
        private javax.swing.JLabel taka;
        private javax.swing.JComboBox year;
        // End of variables declaration//GEN-END:variables
        DefaultTableModel model = new DefaultTableModel(); 
        Connection con=null;
        Calendar cal=new GregorianCalendar();
        int m=cal.get(Calendar.MONTH);
        int y=cal.get(Calendar.YEAR);
        long AMOUNT=0;
    private void connection()
    {
     try{
            Class.forName("com.mysql.jdbc.Driver");
            con=(Connection) DriverManager.getConnection("jdbc:mysql://localhost/cms", "root", "");
        }catch(Exception ex){
          
        }
    }

private void search()
    {
        String YEAR=year.getSelectedItem().toString(),
               MONTH=month.getSelectedItem().toString(),
               CID=cid.getText();
        String MO="";
        if(MONTH.equals("Jan")){
                MO="01";
        }else if(MONTH.trim().equalsIgnoreCase("Feb")){
                MO="02";
        }else if(MONTH.trim().equalsIgnoreCase("Mar")){
                MO="03";
        }else if(MONTH.trim().equalsIgnoreCase("Apr")){
                MO="04";
        }else if(MONTH.trim().equalsIgnoreCase("May")){
                MO="05";
        }else if(MONTH.trim().equalsIgnoreCase("Jun")){
                MO="06";
        }else if(MONTH.trim().equalsIgnoreCase("Jul")){
                MO="07";
        }else if(MONTH.trim().equalsIgnoreCase("Aug")){
                MO="08";
        }else if(MONTH.trim().equalsIgnoreCase("Sep")){
                MO="09";
        }else if(MONTH.trim().equalsIgnoreCase("Oct")){
                MO="10";
        }else if(MONTH.trim().equalsIgnoreCase("Nov")){
                MO="11";
        }else if(MONTH.trim().equalsIgnoreCase("Dec")){
                MO="12";
        }
        
        if((CID.equalsIgnoreCase("")) && !(YEAR.equalsIgnoreCase("Select")) && (MONTH.equalsIgnoreCase("Select"))){
                work2();
                Only_year_bills();
        }else if((CID.equalsIgnoreCase("")) && (YEAR.equalsIgnoreCase("Select")) && !(MONTH.equalsIgnoreCase("Select"))){
                work2();
                Only_month_bills(MO);
        }
        else if(!(CID.equalsIgnoreCase("")) && (YEAR.equalsIgnoreCase("Select")) && (MONTH.equalsIgnoreCase("Select")))
        {       work2();
                Only_one_client_bills();
        }
        else if((CID.equalsIgnoreCase("")) && !(YEAR.equalsIgnoreCase("Select")) && !(MONTH.equalsIgnoreCase("Select")))
        {       work2();
                Only_year_and_month_bills(YEAR, MO);
        }
        else if(!(CID.equalsIgnoreCase("")) && !(YEAR.equalsIgnoreCase("Select")) && (MONTH.equalsIgnoreCase("Select")))
        {       work2();
                Only_year_and_client_bills(YEAR, CID);
        }
        else if(!(CID.equalsIgnoreCase("")) && (YEAR.equalsIgnoreCase("Select")) && !(MONTH.equalsIgnoreCase("Select")))
        {       work2();
                Only_month_and_client_bills(MO, CID);
        }
        else if(!(CID.equalsIgnoreCase("")) && !(YEAR.equalsIgnoreCase("Select")) && !(MONTH.equalsIgnoreCase("Select")))
        {       work2();
                Only_year_month_and_client_bills(YEAR,MO, CID);
        }
        else
        {
            work2();
            all_bills();
        }
        
}
private void all_bills()
{
                try {
                        AMOUNT=0;
                        connection();
                        model = (DefaultTableModel) historyBills.getModel();
                        PreparedStatement st = null;
                        String sql= "Select * from billshistory";
                        st= con.prepareStatement(sql);
                        ResultSet res = null;
                        res = st.executeQuery();
                        
                        while(res.next())
                        {
                                AMOUNT+=res.getInt(6);
                                String a[] = {res.getString(1), res.getString(2), res.getString(6),res.getString(5),res.getString(3),res.getString(4)};
                                model.insertRow(model.getRowCount(), a);
                        }   
                } catch (SQLException ex) {
                        Logger.getLogger(Calculations.class.getName()).log(Level.SEVERE, null, ex);
                }
                taka.setText(""+AMOUNT+" /- Taka");

}
private void Only_one_client_bills()
{
                try {
                        AMOUNT=0;
                        connection();
                        model = (DefaultTableModel) historyBills.getModel();
                        PreparedStatement st = null;
                        String sql= "Select * from billshistory where cid='"+cid.getText()+"'";
                        st= con.prepareStatement(sql);
                        ResultSet res = null;
                        res = st.executeQuery();
                        
                        while(res.next())
                        {
                                AMOUNT+=res.getInt(6);
                                String a[] = {res.getString(1), res.getString(2), res.getString(6),res.getString(5),res.getString(3),res.getString(4)};
                                model.insertRow(model.getRowCount(), a);
                        }   
                } catch (SQLException ex) {
                        Logger.getLogger(Calculations.class.getName()).log(Level.SEVERE, null, ex);
                }
                taka.setText(""+AMOUNT+" /- Taka");

}
private void Only_year_bills()
{
                try {
                        AMOUNT=0;
                        connection();
                        model = (DefaultTableModel) historyBills.getModel();
                        PreparedStatement st = null;
                        String sql= "Select * from billshistory where Pdate LIKE '%"+year.getSelectedItem().toString()+"-%'";
                        st= con.prepareStatement(sql);
                        ResultSet res = null;
                        res = st.executeQuery();
                        
                        while(res.next())
                        {
                                AMOUNT+=res.getInt(6);
                                String a[] = {res.getString(1), res.getString(2), res.getString(6),res.getString(5),res.getString(3),res.getString(4)};
                                model.insertRow(model.getRowCount(), a);
                        }   
                } catch (SQLException ex) {
                        Logger.getLogger(Calculations.class.getName()).log(Level.SEVERE, null, ex);
                }
                taka.setText(""+AMOUNT+" /- Taka");

}
private void Only_month_bills(String mm)
{
                try {
                        AMOUNT=0;
                        connection();
                        model = (DefaultTableModel) historyBills.getModel();
                        PreparedStatement st = null;
                        String sql= "Select * from billshistory where Pdate LIKE '%-"+mm+"-%'";
                        st= con.prepareStatement(sql);
                        ResultSet res = null;
                        res = st.executeQuery();
                        
                        while(res.next())
                        {
                                AMOUNT+=res.getInt(6);
                                String a[] = {res.getString(1), res.getString(2), res.getString(6),res.getString(5),res.getString(3),res.getString(4)};
                                model.insertRow(model.getRowCount(), a);
                        }   
                } catch (SQLException ex) {
                        Logger.getLogger(Calculations.class.getName()).log(Level.SEVERE, null, ex);
                }
                taka.setText(""+AMOUNT+" /- Taka");

}
private void Only_year_and_month_bills(String yy,String mm)
{
                try {
                        AMOUNT=0;
                        connection();
                        model = (DefaultTableModel) historyBills.getModel();
                        PreparedStatement st = null;
                        String sql= "Select * from billshistory where Pdate LIKE '%"+yy+"-"+mm+"-%'";
                        st= con.prepareStatement(sql);
                        ResultSet res = null;
                        res = st.executeQuery();
                        
                        while(res.next())
                        {
                                AMOUNT+=res.getInt(6);
                                String a[] = {res.getString(1), res.getString(2), res.getString(6),res.getString(5),res.getString(3),res.getString(4)};
                                model.insertRow(model.getRowCount(), a);
                        }   
                } catch (SQLException ex) {
                        Logger.getLogger(Calculations.class.getName()).log(Level.SEVERE, null, ex);
                }
                taka.setText(""+AMOUNT+" /- Taka");

}
private void Only_year_and_client_bills(String yy,String id)
{
                try {
                        AMOUNT=0;
                        connection();
                        model = (DefaultTableModel) historyBills.getModel();
                        PreparedStatement st = null;
                        String sql= "Select * from billshistory where cid='"+id+"' AND Pdate LIKE '%"+yy+"-%'";
                        st= con.prepareStatement(sql);
                        ResultSet res = null;
                        res = st.executeQuery();
                        
                        while(res.next())
                        {
                                AMOUNT+=res.getInt(6);
                                String a[] = {res.getString(1), res.getString(2), res.getString(6),res.getString(5),res.getString(3),res.getString(4)};
                                model.insertRow(model.getRowCount(), a);
                        }   
                } catch (SQLException ex) {
                        Logger.getLogger(Calculations.class.getName()).log(Level.SEVERE, null, ex);
                }
                taka.setText(""+AMOUNT+" /- Taka");

}
private void Only_month_and_client_bills(String mm,String id)
{
                try {
                        AMOUNT=0;
                        connection();
                        model = (DefaultTableModel) historyBills.getModel();
                        PreparedStatement st = null;
                        String sql= "Select * from billshistory where cid='"+id+"' AND Pdate LIKE '%-"+mm+"-%'";
                        st= con.prepareStatement(sql);
                        ResultSet res = null;
                        res = st.executeQuery();
                        
                        while(res.next())
                        {
                                AMOUNT+=res.getInt(6);
                                String a[] = {res.getString(1), res.getString(2), res.getString(6),res.getString(5),res.getString(3),res.getString(4)};
                                model.insertRow(model.getRowCount(), a);
                        }   
                } catch (SQLException ex) {
                        Logger.getLogger(Calculations.class.getName()).log(Level.SEVERE, null, ex);
                }
                taka.setText(""+AMOUNT+" /- Taka");

}
private void Only_year_month_and_client_bills(String yy,String mm,String id)
{
                try {
                        AMOUNT=0;
                        connection();
                        model = (DefaultTableModel) historyBills.getModel();
                        PreparedStatement st = null;
                        String sql= "Select * from billshistory where cid='"+id+"' AND Pdate LIKE '%"+yy+"-"+mm+"-%'";
                        st= con.prepareStatement(sql);
                        ResultSet res = null;
                        res = st.executeQuery();
                        
                        while(res.next())
                        {
                                AMOUNT+=res.getInt(6);
                                String a[] = {res.getString(1), res.getString(2), res.getString(6),res.getString(5),res.getString(3),res.getString(4)};
                                model.insertRow(model.getRowCount(), a);
                        }   
                } catch (SQLException ex) {
                        Logger.getLogger(Calculations.class.getName()).log(Level.SEVERE, null, ex);
                }
                taka.setText(""+AMOUNT+" /- Taka");

}
private void work2()
    {
        model.setRowCount(0);
    }
 //end tag
        
        
        
}
