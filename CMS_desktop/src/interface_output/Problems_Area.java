/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package interface_output;

import all_classes.FileReadWrite;
import interface_input.solution;
import java.awt.Cursor;
import java.io.IOException;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.text.MessageFormat;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.ImageIcon;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author user
 */
public class Problems_Area extends javax.swing.JFrame {

    /**
     * Creates new form Problems_Area
     */
    DefaultTableModel model = new DefaultTableModel(); 
    int mX,mY;
    public Problems_Area() {
        initComponents();
        ImageIcon img=new ImageIcon("img\\cms.png");
        this.setIconImage(img.getImage());
        move.setCursor(new Cursor(Cursor.MOVE_CURSOR));
        exit.setCursor(new Cursor(Cursor.HAND_CURSOR));
        min.setCursor(new Cursor(Cursor.HAND_CURSOR));
        print.setCursor(new Cursor(Cursor.HAND_CURSOR));
        solveit.setCursor(new Cursor(Cursor.HAND_CURSOR));
        update.setCursor(new Cursor(Cursor.HAND_CURSOR));
        work2();
        CCID.setSelected(true);
        tb_update();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        move = new javax.swing.JLabel();
        min = new javax.swing.JLabel();
        exit = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        p_tb = new javax.swing.JTable();
        search = new javax.swing.JTextField();
        cid = new javax.swing.JTextField();
        title = new javax.swing.JTextField();
        problems = new javax.swing.JScrollPane();
        msg = new javax.swing.JTextArea();
        status = new javax.swing.JComboBox();
        update = new javax.swing.JLabel();
        solveit = new javax.swing.JLabel();
        print = new javax.swing.JButton();
        CCID = new javax.swing.JCheckBox();
        PID = new javax.swing.JCheckBox();
        bg = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setUndecorated(true);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        move.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseDragged(java.awt.event.MouseEvent evt) {
                moveMouseDragged(evt);
            }
        });
        move.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                moveMousePressed(evt);
            }
        });
        getContentPane().add(move, new org.netbeans.lib.awtextra.AbsoluteConstraints(24, 0, 590, 20));

        min.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                minMouseClicked(evt);
            }
        });
        getContentPane().add(min, new org.netbeans.lib.awtextra.AbsoluteConstraints(624, 0, 20, 20));

        exit.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                exitMouseClicked(evt);
            }
        });
        getContentPane().add(exit, new org.netbeans.lib.awtextra.AbsoluteConstraints(646, 0, 20, 20));

        p_tb.setBackground(new java.awt.Color(54, 59, 103));
        p_tb.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        p_tb.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "PID", "CID", "Title", "Problems", "Status"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, true, true
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        p_tb.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                p_tbMouseClicked(evt);
            }
        });
        p_tb.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                p_tbKeyReleased(evt);
            }
        });
        jScrollPane1.setViewportView(p_tb);

        getContentPane().add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(350, 90, 300, 320));

        search.setBackground(new java.awt.Color(122, 103, 129));
        search.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        search.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        search.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                searchKeyReleased(evt);
            }
        });
        getContentPane().add(search, new org.netbeans.lib.awtextra.AbsoluteConstraints(360, 40, 210, 27));

        cid.setEditable(false);
        cid.setBackground(new java.awt.Color(37, 40, 95));
        cid.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        cid.setForeground(new java.awt.Color(51, 255, 204));
        cid.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        getContentPane().add(cid, new org.netbeans.lib.awtextra.AbsoluteConstraints(90, 77, 200, 27));

        title.setEditable(false);
        title.setBackground(new java.awt.Color(37, 40, 95));
        title.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        title.setForeground(new java.awt.Color(51, 255, 204));
        title.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        getContentPane().add(title, new org.netbeans.lib.awtextra.AbsoluteConstraints(90, 128, 200, 27));

        msg.setEditable(false);
        msg.setBackground(new java.awt.Color(37, 40, 95));
        msg.setColumns(20);
        msg.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        msg.setForeground(new java.awt.Color(51, 255, 204));
        msg.setRows(5);
        msg.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        problems.setViewportView(msg);

        getContentPane().add(problems, new org.netbeans.lib.awtextra.AbsoluteConstraints(90, 190, 200, 130));

        status.setBackground(new java.awt.Color(37, 40, 95));
        status.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        status.setForeground(new java.awt.Color(51, 255, 204));
        status.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Pending", "Reviewing" }));
        status.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        getContentPane().add(status, new org.netbeans.lib.awtextra.AbsoluteConstraints(90, 350, 200, 25));

        update.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                updateMouseClicked(evt);
            }
        });
        getContentPane().add(update, new org.netbeans.lib.awtextra.AbsoluteConstraints(190, 387, 100, 30));

        solveit.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                solveitMouseClicked(evt);
            }
        });
        getContentPane().add(solveit, new org.netbeans.lib.awtextra.AbsoluteConstraints(80, 387, 100, 30));

        print.setBackground(new java.awt.Color(255, 204, 204));
        print.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        print.setText("Print");
        print.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                printActionPerformed(evt);
            }
        });
        getContentPane().add(print, new org.netbeans.lib.awtextra.AbsoluteConstraints(580, 53, 70, 30));

        buttonGroup1.add(CCID);
        CCID.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        CCID.setText("By Client ID");
        CCID.setOpaque(false);
        getContentPane().add(CCID, new org.netbeans.lib.awtextra.AbsoluteConstraints(440, 62, -1, -1));

        buttonGroup1.add(PID);
        PID.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        PID.setText("By PID");
        PID.setOpaque(false);
        getContentPane().add(PID, new org.netbeans.lib.awtextra.AbsoluteConstraints(360, 62, -1, -1));

        bg.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/problems_area.png"))); // NOI18N
        getContentPane().add(bg, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 672, 432));

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void moveMouseDragged(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_moveMouseDragged
        // TODO add your handling code here:
        int x=evt.getXOnScreen();
        int y=evt.getYOnScreen();
        this.setLocation(x-mX, y-mY);
    }//GEN-LAST:event_moveMouseDragged

    private void moveMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_moveMousePressed
        // TODO add your handling code here:
        mX=evt.getX();
        mY=evt.getY();
    }//GEN-LAST:event_moveMousePressed

    private void minMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_minMouseClicked
        // TODO add your handling code here:
        this.setExtendedState(profile.ICONIFIED);
    }//GEN-LAST:event_minMouseClicked

    private void exitMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_exitMouseClicked
        // TODO add your handling code here:
        this.dispose();
    }//GEN-LAST:event_exitMouseClicked

    private void updateMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_updateMouseClicked
    String sql="Update problems set status='"+status.getSelectedItem().toString()+
            "' where pid='"+ProblemsID+"'";
    //System.out.print(sql);
        try{
            
                connection();
                Statement st=null;
                st=con.createStatement();
                st.executeUpdate(sql);
            reset();
            work2();
            tb_update();
            JOptionPane.showConfirmDialog(this,"Information is successfuly updated.","Confermation message",JOptionPane.OK_CANCEL_OPTION,JOptionPane.INFORMATION_MESSAGE,new ImageIcon("img//thik_mark.png"));
        }catch(SQLException e){
            JOptionPane.showMessageDialog(this, e);
        }
    }//GEN-LAST:event_updateMouseClicked

    private void solveitMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_solveitMouseClicked
        if(cid.getText().equalsIgnoreCase("")){
            JOptionPane.showMessageDialog(null,"Not fount any problems! ! !");
        }else{
        try {
            FileReadWrite.FileInput(ProblemsID,"files//PID");
            FileReadWrite.FileInput("1","files//PIDF");
            new solution().setVisible(true);
            this.dispose();
        } catch (IOException ex) {
            Logger.getLogger(Problems_Area.class.getName()).log(Level.SEVERE, null, ex);
        }
        }
        
    }//GEN-LAST:event_solveitMouseClicked

    private void printActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_printActionPerformed
    MessageFormat head=new MessageFormat(
            "**** Problems List ****"
    );
     MessageFormat foot=new MessageFormat("Page{0, number,integer}");
     try{
         p_tb.print(JTable.PrintMode.NORMAL, head, foot);
     }catch(java.awt.print.PrinterException e)
     {
         JOptionPane.showMessageDialog(null, "Errors:"+e);
     }
    }//GEN-LAST:event_printActionPerformed

    private void searchKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_searchKeyReleased
     work2();
     search();
    }//GEN-LAST:event_searchKeyReleased

    private void p_tbKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_p_tbKeyReleased
    onclick();
    }//GEN-LAST:event_p_tbKeyReleased

    private void p_tbMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_p_tbMouseClicked
    onclick();
    }//GEN-LAST:event_p_tbMouseClicked

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Problems_Area.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Problems_Area.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Problems_Area.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Problems_Area.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Problems_Area().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JCheckBox CCID;
    private javax.swing.JCheckBox PID;
    private javax.swing.JLabel bg;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JTextField cid;
    private javax.swing.JLabel exit;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel min;
    private javax.swing.JLabel move;
    private javax.swing.JTextArea msg;
    private javax.swing.JTable p_tb;
    private javax.swing.JButton print;
    private javax.swing.JScrollPane problems;
    private javax.swing.JTextField search;
    private javax.swing.JLabel solveit;
    private javax.swing.JComboBox status;
    private javax.swing.JTextField title;
    private javax.swing.JLabel update;
    // End of variables declaration//GEN-END:variables
Connection con=null;
String ProblemsID="";
    private void connection()
    {
     try{
            Class.forName("com.mysql.jdbc.Driver");
            con=(Connection) DriverManager.getConnection("jdbc:mysql://localhost/cms", "root", "");
        }catch(Exception ex){
          
        }
    }
 private void reset()
{
    cid.setText(null);
    title.setText(null);
    msg.setText(null);
    status.setSelectedIndex(0);
    ProblemsID=null;
}
 private void onclick(){
        int row=p_tb.getSelectedRow();
        ProblemsID=(p_tb.getModel().getValueAt(row, 0).toString());
        cid.setText(p_tb.getModel().getValueAt(row, 1).toString());
        title.setText(p_tb.getModel().getValueAt(row, 2).toString());
        msg.setText(p_tb.getModel().getValueAt(row, 3).toString());
        String tem=(p_tb.getModel().getValueAt(row, 4).toString());
        if (tem.equalsIgnoreCase("Pending")) {
            status.setSelectedIndex(0);  
         }else{
            status.setSelectedIndex(1);  
        }
    }
private void tb_update(){
 
            try {
                connection();
                model = (DefaultTableModel) p_tb.getModel();   
                PreparedStatement st = null;
                String sql = "Select * from problems where status<>'Solved'";
            st= con.prepareStatement(sql);
            ResultSet res = null;
            res = st.executeQuery();       
            while(res.next())
            {
                 String a[] = {res.getString(1),res.getString(2), res.getString(3), res.getString(4),res.getString(6)};              
                model.insertRow(model.getRowCount(), a);
            }
        }catch(SQLException e)
        {
           System.out.print(e);
        }
    }
private void search()
    {
        if(search.getText().trim().length()!=0){
            try {
                connection();
            model = (DefaultTableModel) p_tb.getModel();
            PreparedStatement st = null;
            String sql;
            if(CCID.isSelected()){
                sql= "Select * from problems where cid LIKE '%"+search.getText()+"%' where status<>'Solved'"; 
            }
            else{
                sql="Select * from problems where pid LIKE '%"+search.getText()+"%' where status<>'Solved'";
            }
            st= con.prepareStatement(sql);
            ResultSet res = null;
            res = st.executeQuery();       
            while(res.next())
            {
                String a[] = {res.getString(1),res.getString(2), res.getString(3), res.getString(4),res.getString(6)};              
                model.insertRow(model.getRowCount(), a);
            }
            
        }catch(SQLException e){
            
        }
        }
        else if(search.getText().equalsIgnoreCase(""))
        {
            work2();
            tb_update(); 
        }
}
private void work2()
    {
        model.setRowCount(0);
    }
 //end tag

}
