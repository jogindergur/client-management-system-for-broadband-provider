/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package interface_output;

import all_classes.FileReadWrite;
import java.awt.Cursor;
import java.io.FileNotFoundException;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.text.MessageFormat;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.ImageIcon;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.JTextField;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author user
 */
public class Pending_bills extends javax.swing.JFrame {

    /**
     * Creates new form Pending_bills
     */
    int mX,mY;
    DefaultTableModel model = new DefaultTableModel(); 
    public Pending_bills() {
        initComponents();
        ImageIcon img=new ImageIcon("img\\cms.png");
        this.setIconImage(img.getImage());
        move.setCursor(new Cursor(Cursor.MOVE_CURSOR));
        exit.setCursor(new Cursor(Cursor.HAND_CURSOR));
        min.setCursor(new Cursor(Cursor.HAND_CURSOR));
        print.setCursor(new Cursor(Cursor.HAND_CURSOR));
        reset.setCursor(new Cursor(Cursor.HAND_CURSOR));
        submit.setCursor(new Cursor(Cursor.HAND_CURSOR));
        delete.setCursor(new Cursor(Cursor.HAND_CURSOR));
        work2();
        tb_update();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        move = new javax.swing.JLabel();
        min = new javax.swing.JLabel();
        exit = new javax.swing.JLabel();
        wdate = new javax.swing.JTextField();
        tid = new javax.swing.JTextField();
        amount = new javax.swing.JTextField();
        cid = new javax.swing.JTextField();
        search = new javax.swing.JTextField();
        band = new javax.swing.JTextField();
        pdate = new com.toedter.calendar.JDateChooser();
        status = new javax.swing.JComboBox();
        Via = new javax.swing.JComboBox();
        submit = new javax.swing.JLabel();
        reset = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        pbills = new javax.swing.JTable();
        print = new javax.swing.JLabel();
        delete = new javax.swing.JLabel();
        bg = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setUndecorated(true);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        move.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseDragged(java.awt.event.MouseEvent evt) {
                moveMouseDragged(evt);
            }
        });
        move.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                moveMousePressed(evt);
            }
        });
        getContentPane().add(move, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 640, 20));

        min.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                minMouseClicked(evt);
            }
        });
        getContentPane().add(min, new org.netbeans.lib.awtextra.AbsoluteConstraints(643, 0, 30, 25));

        exit.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                exitMouseClicked(evt);
            }
        });
        getContentPane().add(exit, new org.netbeans.lib.awtextra.AbsoluteConstraints(680, 0, 30, 25));

        wdate.setBackground(new java.awt.Color(91, 91, 133));
        wdate.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        wdate.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        getContentPane().add(wdate, new org.netbeans.lib.awtextra.AbsoluteConstraints(180, 130, 174, 30));

        tid.setBackground(new java.awt.Color(91, 91, 133));
        tid.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        tid.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        getContentPane().add(tid, new org.netbeans.lib.awtextra.AbsoluteConstraints(104, 324, 250, 30));

        amount.setBackground(new java.awt.Color(91, 91, 133));
        amount.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        amount.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        getContentPane().add(amount, new org.netbeans.lib.awtextra.AbsoluteConstraints(105, 280, 250, 30));

        cid.setBackground(new java.awt.Color(91, 91, 133));
        cid.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        cid.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        getContentPane().add(cid, new org.netbeans.lib.awtextra.AbsoluteConstraints(100, 30, 260, 30));

        search.setBackground(new java.awt.Color(95, 71, 70));
        search.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        search.setToolTipText("Search by Cid or Tid");
        search.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        search.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                searchKeyReleased(evt);
            }
        });
        getContentPane().add(search, new org.netbeans.lib.awtextra.AbsoluteConstraints(370, 80, 250, 35));

        band.setBackground(new java.awt.Color(91, 91, 133));
        band.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        band.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        getContentPane().add(band, new org.netbeans.lib.awtextra.AbsoluteConstraints(110, 80, 244, 30));

        pdate.setBackground(new java.awt.Color(46, 46, 89));
        pdate.setToolTipText("Select the date");
        pdate.setDateFormatString("yyyy-M-d");
        getContentPane().add(pdate, new org.netbeans.lib.awtextra.AbsoluteConstraints(122, 180, 230, 30));

        status.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Pending", "Accepted" }));
        getContentPane().add(status, new org.netbeans.lib.awtextra.AbsoluteConstraints(90, 374, 265, 30));

        Via.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "bKash", "uCash", "mCash", "DBL" }));
        getContentPane().add(Via, new org.netbeans.lib.awtextra.AbsoluteConstraints(72, 230, 280, 30));

        submit.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                submitMouseClicked(evt);
            }
        });
        getContentPane().add(submit, new org.netbeans.lib.awtextra.AbsoluteConstraints(230, 420, 130, 50));

        reset.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                resetMouseClicked(evt);
            }
        });
        getContentPane().add(reset, new org.netbeans.lib.awtextra.AbsoluteConstraints(120, 420, 100, 50));

        jScrollPane1.setBackground(new java.awt.Color(50, 19, 80));
        jScrollPane1.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));

        pbills.setBackground(new java.awt.Color(102, 102, 255));
        pbills.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Cilient id", "Trans.ID", "Ref.", "Amount", "W. Month", "Via"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        pbills.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                pbillsMouseClicked(evt);
            }
        });
        pbills.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                pbillsKeyReleased(evt);
            }
        });
        jScrollPane1.setViewportView(pbills);

        getContentPane().add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(370, 120, 340, 340));

        print.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                printMouseClicked(evt);
            }
        });
        getContentPane().add(print, new org.netbeans.lib.awtextra.AbsoluteConstraints(630, 80, 80, 40));

        delete.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                deleteMouseClicked(evt);
            }
        });
        getContentPane().add(delete, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 420, 110, 40));

        bg.setBackground(new java.awt.Color(91, 91, 133));
        bg.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        bg.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/pending bill_1.png"))); // NOI18N
        bg.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        getContentPane().add(bg, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, -1, 480));

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void moveMouseDragged(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_moveMouseDragged
        // TODO add your handling code here:
        int x=evt.getXOnScreen();
        int y=evt.getYOnScreen();
        this.setLocation(x-mX, y-mY);
    }//GEN-LAST:event_moveMouseDragged

    private void moveMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_moveMousePressed
        // TODO add your handling code here:
        mX=evt.getX();
        mY=evt.getY();
    }//GEN-LAST:event_moveMousePressed

    private void minMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_minMouseClicked
        // TODO add your handling code here:
        this.setExtendedState(Pending_bills.ICONIFIED);
    }//GEN-LAST:event_minMouseClicked

    private void exitMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_exitMouseClicked
        // TODO add your handling code here:
        this.dispose();
    }//GEN-LAST:event_exitMouseClicked

    private void searchKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_searchKeyReleased
      work2();
        search();
    
    }//GEN-LAST:event_searchKeyReleased

    private void submitMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_submitMouseClicked
        // TODO add your handling code here:
        if(allValid()){
            try {
                profile_info();
                connection();
                String sql="insert into billshistory(cid,Wdate,Pdate,bandwidth,amount,via,type,status,Reference,rname,comment) values(?,?,?,?,?,?,?,?,?,?,?)";
                PreparedStatement preparedStatement = con.prepareStatement(sql);
                preparedStatement.setString(1, Cid);
                preparedStatement.setString(2, Wdate);
                preparedStatement.setString(3, Pdate);
                preparedStatement.setString(4, BAND);
                preparedStatement.setString(5, Amount);    
                preparedStatement.setString(6, VIA);  
                preparedStatement.setString(7, "Bill"); 
                preparedStatement.setString(8, Status);
                preparedStatement.setString(9, TID); 
                preparedStatement.setString(10, RNAME); 
                preparedStatement.setString(11, "Thank you!"); 
                preparedStatement.executeUpdate();
                updateAtatus();
                work2();
                tb_update();
                JOptionPane.showMessageDialog(null, "Added successfully!");
                
                reset();
            } catch (SQLException ex) {
                JOptionPane.showMessageDialog(null, ex);
               // Logger.getLogger(Bills_m.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_submitMouseClicked

    private void resetMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_resetMouseClicked
        reset();
    }//GEN-LAST:event_resetMouseClicked

    private void deleteMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_deleteMouseClicked
    if(!(tid.getText().equalsIgnoreCase(""))){
        int conferm=JOptionPane.showConfirmDialog(this, "Are you sure Delete this Entry!");
       if(conferm==0){
        connection();
        String sql="DELETE from onlinepaybill where tid= '"+tid.getText()+"'";
        try{
            PreparedStatement st=null;
            st=con.prepareStatement(sql);
            st.executeUpdate();
            reset();
            /* JOptionPane.showMessageDialog(null,"Network is connected...\n Press to go Recovery Password.",,new ImageIcon("thik_mark.png"));*/
            JOptionPane.showConfirmDialog(this,"Information is successfuly Deleted.","Confermation message",JOptionPane.OK_CANCEL_OPTION,JOptionPane.INFORMATION_MESSAGE,new ImageIcon("img//del.jpg"));
            work2();
            tb_update();
        }catch(SQLException e){

        }
       }
    }
    else{
        JOptionPane.showMessageDialog(null, "Not Found! ! !");
    }
    }//GEN-LAST:event_deleteMouseClicked

    private void pbillsMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_pbillsMouseClicked
      int row=pbills.getSelectedRow();
      cid.setText(pbills.getModel().getValueAt(row, 0).toString());
      tid.setText(pbills.getModel().getValueAt(row, 1).toString());
      amount.setText(pbills.getModel().getValueAt(row, 3).toString());  
      wdate.setText(pbills.getModel().getValueAt(row, 4).toString());
      bandwidth();
      band.setText(BAND);
           //   setText(pbills.getModel().getValueAt(row, 3).toString());Cash
//bKash
//uCash
//DBL
      String st=(pbills.getModel().getValueAt(row, 5).toString());
      if(st.equalsIgnoreCase("bKash")){
          Via.setSelectedIndex(0);
      }
      else if(st.equalsIgnoreCase("uCash")){
          Via.setSelectedIndex(1);
      }
      else if(st.equalsIgnoreCase("MCash")){
          Via.setSelectedIndex(2);
      }
      else
      {
          Via.setSelectedIndex(3);
      }
    }//GEN-LAST:event_pbillsMouseClicked

    private void pbillsKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_pbillsKeyReleased
     int row=pbills.getSelectedRow();
      cid.setText(pbills.getModel().getValueAt(row, 0).toString());
      tid.setText(pbills.getModel().getValueAt(row, 1).toString());
      amount.setText(pbills.getModel().getValueAt(row, 3).toString());  
      wdate.setText(pbills.getModel().getValueAt(row, 4).toString());
      bandwidth();
      band.setText(BAND);
           //   setText(pbills.getModel().getValueAt(row, 3).toString());Cash
//bKash
//uCash
//DBL
      String st=(pbills.getModel().getValueAt(row, 5).toString());
      if(st.equalsIgnoreCase("bKash")){
          Via.setSelectedIndex(0);
      }
      else if(st.equalsIgnoreCase("uCash")){
          Via.setSelectedIndex(1);
      }
      else if(st.equalsIgnoreCase("MCash")){
          Via.setSelectedIndex(2);
      }
      else
      {
          Via.setSelectedIndex(3);
      }
    }//GEN-LAST:event_pbillsKeyReleased

    private void printMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_printMouseClicked
    MessageFormat head=new MessageFormat(
            "**** Online Pending Billls List ****"
    );
     MessageFormat foot=new MessageFormat("Page{0, number,integer}");
     try{
         pbills.print(JTable.PrintMode.NORMAL, head, foot);
     }catch(java.awt.print.PrinterException e)
     {
         JOptionPane.showMessageDialog(null, "Errors:"+e);
     }
    }//GEN-LAST:event_printMouseClicked

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Pending_bills.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Pending_bills.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Pending_bills.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Pending_bills.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Pending_bills().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox Via;
    private javax.swing.JTextField amount;
    private javax.swing.JTextField band;
    private javax.swing.JLabel bg;
    private javax.swing.JTextField cid;
    private javax.swing.JLabel delete;
    private javax.swing.JLabel exit;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel min;
    private javax.swing.JLabel move;
    private javax.swing.JTable pbills;
    private com.toedter.calendar.JDateChooser pdate;
    private javax.swing.JLabel print;
    private javax.swing.JLabel reset;
    private javax.swing.JTextField search;
    private javax.swing.JComboBox status;
    private javax.swing.JLabel submit;
    private javax.swing.JTextField tid;
    private javax.swing.JTextField wdate;
    // End of variables declaration//GEN-END:variables
Connection con=null;
String Cid,Pdate,Wdate,VIA,Amount,BAND,RNAME,TID,Status;
    private void connection()
    {
     try{
            Class.forName("com.mysql.jdbc.Driver");
            con=(Connection) DriverManager.getConnection("jdbc:mysql://localhost/cms", "root", "");
        }catch(Exception ex){
          
        }
    }
 private void reset()
{
    cid.setText(null);
    band.setText(null);
    pdate.setDate(null);
    wdate.setText(null);
    amount.setText(null);
    tid.setText(null);
    status.setSelectedIndex(0);
    Via.setSelectedIndex(0);
    
}
 private void updateAtatus()
 {
     String sql="Update onlinepaybill set  status='"+(status.getSelectedItem()).toString()
                +"' where tid='"+tid.getText()+"'";
    
        try{
            
            connection();
                Statement st=null;
                st=con.createStatement();
                st.executeUpdate(sql);
            //JOptionPane.showConfirmDialog(this,"Information is successfuly updated.","Confermation message",JOptionPane.OK_CANCEL_OPTION,JOptionPane.INFORMATION_MESSAGE,new ImageIcon("thik_mark.png"));
        }catch(SQLException e){
            JOptionPane.showMessageDialog(this, e);
        }
 }
 private boolean allValid() {
        Cid=cid.getText();
        TID=tid.getText();
        BAND=band.getText();
        Amount=amount.getText();
        VIA=Via.getSelectedItem().toString();
        Status=status.getSelectedItem().toString();
        Pdate=((JTextField)pdate.getDateEditor().getUiComponent()).getText();
        Wdate=wdate.getText();
        if(Cid.equalsIgnoreCase(""))
        {
            //alert.setText("* Client ID not valid");
            JOptionPane.showMessageDialog(null, "Enter valid Client ID !");
            return false;
        }
        else if(TID.equalsIgnoreCase(""))
        {
            //alert.setText("* Email not Bandwidth !");
            JOptionPane.showMessageDialog(null, "Enter valid Trans.ID!");
            return false;
        }
        else if(BAND.equalsIgnoreCase(""))
        {
            //alert.setText("* Email not Bandwidth !");
            JOptionPane.showMessageDialog(null, "Enter valid Bandwidth!");
            return false;
        }
        else if(Amount.equalsIgnoreCase(""))
        {
            //alert.setText("* Password not valid");
            JOptionPane.showMessageDialog(null, "Enter valid Amount!");
            return false;
        }
        else if(Pdate.equalsIgnoreCase(""))
        {
            //alert.setText("* Mobile not valid!");
            JOptionPane.showMessageDialog(null, "Enter valid Paying date!");
            return false;
        }
        else if(Wdate.equalsIgnoreCase(""))
        {
            //alert.setText("* Mobile not valid!");
            JOptionPane.showMessageDialog(null, "Enter valid which month's date!");
            return false;
        }
        else{
          //  alert.setText("");
            return true;
        }
    }
 private void profile_info()
{
    try {
            String sql="Select * from userinfo where Email='"+FileReadWrite.FileOutput("files//name")+"'";
           // JOptionPane.showMessageDialog(this, sql);
            PreparedStatement st=null;
            ResultSet rs=null;
            try {
                connection();
                st=con.prepareStatement(sql);
                rs=st.executeQuery();
               // JOptionPane.showMessageDialog(this, sql);
            if(rs.next())
            {
                RNAME=rs.getString(2);
            }
            } catch (SQLException ex) {
                Logger.getLogger(profile.class.getName()).log(Level.SEVERE, null, ex);
            }
            
        } catch (FileNotFoundException ex) {
            Logger.getLogger(profile.class.getName()).log(Level.SEVERE, null, ex);
        }
}  
private void tb_update()
    {
 
            try {
                connection();
                model = (DefaultTableModel) pbills.getModel();          
                PreparedStatement st = null;
                String sql = "Select * from onlinepaybill where status='pending'";
            st= con.prepareStatement(sql);
            ResultSet res = null;
            res = st.executeQuery();       
            while(res.next())
            {
                 String a[] = {res.getString(2), res.getString(1), res.getString(3),res.getString(7),res.getDate(4).toString(),res.getString(6)};              
                model.insertRow(model.getRowCount(), a);
                //System.out.print(a[0]);
            }
        }catch(SQLException e)
        {
           System.out.print(e);
        }
    }
private void search()
    {
        if(search.getText().trim().length()!=0){
            try {
                connection();
            model = (DefaultTableModel) pbills.getModel();
            PreparedStatement st = null;
            String sql = "Select * from onlinepaybill where cid LIKE '%"+search.getText()+"%' and status='pending' ";
            String sql2 = "Select * from onlinepaybill where tid LIKE '%"+search.getText()+"%' and status='pending' ";
            st= con.prepareStatement(sql);
            ResultSet res = null;
            res = st.executeQuery();       
            while(res.next())
            {
                // JOptionPane.showMessageDialog(this, "work");
               String a[] = {res.getString(2), res.getString(1), res.getString(3),res.getString(7),res.getDate(4).toString(),res.getString(6)};              
                model.insertRow(model.getRowCount(), a);
            }
            st=null;
            st= con.prepareStatement(sql2);
            res = null;
            res = st.executeQuery();       
            while(res.next())
            {
                // JOptionPane.showMessageDialog(this, "work");
                String a[] = {res.getString(2), res.getString(1), res.getString(3),res.getString(7),res.getDate(4).toString(),res.getString(6)};              
                model.insertRow(model.getRowCount(), a);
            }
            
        }catch(SQLException e)
        {
            
        }
        }
        else if(search.getText().equalsIgnoreCase(""))
        {
            work2();
            tb_update(); 
        }
}
    private void work2()
    {
        model.setRowCount(0);
    }
    
    private void bandwidth()
    {
        String sql="Select * from clientinfo where cid='"+cid.getText()+"'";
        PreparedStatement st=null;
        ResultSet rs=null;
        try {
            connection();
            st=con.prepareStatement(sql);
            rs=st.executeQuery();
            // JOptionPane.showMessageDialog(this, sql);
            if(rs.next())
            {
                BAND=rs.getString(9);
            }
        } catch (SQLException ex) {
            Logger.getLogger(profile.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    
    //end tag
}
