/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package interface_input;

import all_classes.FileReadWrite;
import interface_output.*;
import java.awt.Cursor;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.text.MessageFormat;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.ImageIcon;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.JTextField;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author user
 */
public class solution extends javax.swing.JFrame {

    /**
     * Creates new form Problems_history
     */
    int mX,mY;
    DefaultTableModel model = new DefaultTableModel(); 
    public solution() {
        initComponents();
        ImageIcon img=new ImageIcon("img\\cms.png");
        this.setIconImage(img.getImage());
        move.setCursor(new Cursor(Cursor.MOVE_CURSOR));
        exit.setCursor(new Cursor(Cursor.HAND_CURSOR));
        min.setCursor(new Cursor(Cursor.HAND_CURSOR));
        print.setCursor(new Cursor(Cursor.HAND_CURSOR));
        solved.setCursor(new Cursor(Cursor.HAND_CURSOR));
        reset.setCursor(new Cursor(Cursor.HAND_CURSOR));
        work2();
        CCID.setSelected(true);
        tb_update();
        try {
            if(FileReadWrite.FileOutput("files//PIDF").equalsIgnoreCase("1")){
             search.setText(FileReadWrite.FileOutput("files//PID"));
             PID.setSelected(true);
             work2();
             search();
             p_tb.setRowSelectionInterval(0, 0);
             onclick();
             FileReadWrite.FileInput("0", "files//PIDF");
            }
        } catch (FileNotFoundException ex) {
            Logger.getLogger(solution.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(solution.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        move = new javax.swing.JLabel();
        min = new javax.swing.JLabel();
        exit = new javax.swing.JLabel();
        adate = new com.toedter.calendar.JDateChooser();
        sdate = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        solution_msg = new javax.swing.JTextArea();
        jScrollPane2 = new javax.swing.JScrollPane();
        problem = new javax.swing.JTextArea();
        status = new javax.swing.JLabel();
        reset = new javax.swing.JLabel();
        solver = new javax.swing.JLabel();
        cid = new javax.swing.JLabel();
        pid = new javax.swing.JLabel();
        title = new javax.swing.JLabel();
        solved = new javax.swing.JLabel();
        jScrollPane4 = new javax.swing.JScrollPane();
        p_tb = new javax.swing.JTable();
        PID = new javax.swing.JCheckBox();
        search = new javax.swing.JTextField();
        print = new javax.swing.JButton();
        CCID = new javax.swing.JCheckBox();
        bg = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setUndecorated(true);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        move.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseDragged(java.awt.event.MouseEvent evt) {
                moveMouseDragged(evt);
            }
        });
        move.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                moveMousePressed(evt);
            }
        });
        getContentPane().add(move, new org.netbeans.lib.awtextra.AbsoluteConstraints(4, 0, 880, 20));

        min.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                minMouseClicked(evt);
            }
        });
        getContentPane().add(min, new org.netbeans.lib.awtextra.AbsoluteConstraints(895, 0, 23, 25));

        exit.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                exitMouseClicked(evt);
            }
        });
        getContentPane().add(exit, new org.netbeans.lib.awtextra.AbsoluteConstraints(924, 0, 30, 25));

        adate.setBackground(new java.awt.Color(46, 46, 89));
        adate.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        adate.setToolTipText("Select the date");
        adate.setDateFormatString("yyyy-M-d");
        adate.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        getContentPane().add(adate, new org.netbeans.lib.awtextra.AbsoluteConstraints(460, 400, 150, 40));

        sdate.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        sdate.setForeground(new java.awt.Color(255, 255, 255));
        getContentPane().add(sdate, new org.netbeans.lib.awtextra.AbsoluteConstraints(140, 400, 150, 40));

        jScrollPane1.setBackground(new java.awt.Color(37, 40, 89));
        jScrollPane1.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));

        solution_msg.setBackground(new java.awt.Color(37, 40, 89));
        solution_msg.setColumns(20);
        solution_msg.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        solution_msg.setForeground(new java.awt.Color(255, 255, 255));
        solution_msg.setRows(5);
        solution_msg.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jScrollPane1.setViewportView(solution_msg);

        getContentPane().add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(340, 190, 270, 190));

        jScrollPane2.setBackground(new java.awt.Color(37, 40, 89));
        jScrollPane2.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));

        problem.setEditable(false);
        problem.setBackground(new java.awt.Color(37, 40, 89));
        problem.setColumns(20);
        problem.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        problem.setForeground(new java.awt.Color(255, 255, 255));
        problem.setRows(5);
        jScrollPane2.setViewportView(problem);

        getContentPane().add(jScrollPane2, new org.netbeans.lib.awtextra.AbsoluteConstraints(26, 190, 270, 190));

        status.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        status.setForeground(new java.awt.Color(255, 255, 255));
        getContentPane().add(status, new org.netbeans.lib.awtextra.AbsoluteConstraints(140, 460, 160, 40));

        reset.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                resetMouseClicked(evt);
            }
        });
        getContentPane().add(reset, new org.netbeans.lib.awtextra.AbsoluteConstraints(300, 510, 150, 50));

        solver.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        solver.setForeground(new java.awt.Color(255, 255, 255));
        getContentPane().add(solver, new org.netbeans.lib.awtextra.AbsoluteConstraints(380, 460, 230, 40));

        cid.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        cid.setForeground(new java.awt.Color(255, 255, 255));
        getContentPane().add(cid, new org.netbeans.lib.awtextra.AbsoluteConstraints(100, 70, 190, 40));

        pid.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        pid.setForeground(new java.awt.Color(255, 255, 255));
        getContentPane().add(pid, new org.netbeans.lib.awtextra.AbsoluteConstraints(404, 70, 200, 40));

        title.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        title.setForeground(new java.awt.Color(255, 255, 255));
        getContentPane().add(title, new org.netbeans.lib.awtextra.AbsoluteConstraints(100, 120, 510, 40));

        solved.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                solvedMouseClicked(evt);
            }
        });
        getContentPane().add(solved, new org.netbeans.lib.awtextra.AbsoluteConstraints(465, 515, 144, 40));

        p_tb.setBackground(new java.awt.Color(54, 59, 103));
        p_tb.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        p_tb.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "PID", "CID", "Title", "Problems", "Date", "Status"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        p_tb.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                p_tbMouseClicked(evt);
            }
        });
        p_tb.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                p_tbKeyReleased(evt);
            }
        });
        jScrollPane4.setViewportView(p_tb);

        getContentPane().add(jScrollPane4, new org.netbeans.lib.awtextra.AbsoluteConstraints(630, 120, 320, 440));

        buttonGroup1.add(PID);
        PID.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        PID.setText("By PID");
        PID.setOpaque(false);
        getContentPane().add(PID, new org.netbeans.lib.awtextra.AbsoluteConstraints(650, 90, -1, -1));

        search.setBackground(new java.awt.Color(122, 103, 129));
        search.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        search.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        search.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                searchKeyReleased(evt);
            }
        });
        getContentPane().add(search, new org.netbeans.lib.awtextra.AbsoluteConstraints(640, 60, 210, 27));

        print.setBackground(new java.awt.Color(255, 204, 204));
        print.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        print.setText("Print");
        print.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                printActionPerformed(evt);
            }
        });
        getContentPane().add(print, new org.netbeans.lib.awtextra.AbsoluteConstraints(870, 70, 70, 40));

        buttonGroup1.add(CCID);
        CCID.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        CCID.setText("By Client ID");
        CCID.setOpaque(false);
        getContentPane().add(CCID, new org.netbeans.lib.awtextra.AbsoluteConstraints(730, 90, -1, -1));

        bg.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/solution.png"))); // NOI18N
        getContentPane().add(bg, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, -1, -1));

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void moveMouseDragged(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_moveMouseDragged
        // TODO add your handling code here:
        int x=evt.getXOnScreen();
        int y=evt.getYOnScreen();
        this.setLocation(x-mX, y-mY);
    }//GEN-LAST:event_moveMouseDragged

    private void moveMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_moveMousePressed
        // TODO add your handling code here:
        mX=evt.getX();
        mY=evt.getY();
    }//GEN-LAST:event_moveMousePressed

    private void minMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_minMouseClicked
        // TODO add your handling code here:
        this.setExtendedState(this.ICONIFIED);
    }//GEN-LAST:event_minMouseClicked

    private void exitMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_exitMouseClicked
        // TODO add your handling code here:
        this.dispose();
    }//GEN-LAST:event_exitMouseClicked

    private void p_tbMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_p_tbMouseClicked
        onclick();
    }//GEN-LAST:event_p_tbMouseClicked

    private void p_tbKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_p_tbKeyReleased
        onclick();
    }//GEN-LAST:event_p_tbKeyReleased

    private void searchKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_searchKeyReleased
        work2();
        search();
    }//GEN-LAST:event_searchKeyReleased

    private void solvedMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_solvedMouseClicked
     if(allValid())
        {
            try {
                profile_info();
                connection();
                //RNAME,Adate,s_msg,Title,STatus,CID,PSID;
                String sql="insert into solution(psid,cid,status,solver,date,title,Message) values(?,?,?,?,?,?,?)";
                PreparedStatement preparedStatement = con.prepareStatement(sql);
                preparedStatement.setString(1,PSID);
                preparedStatement.setString(2, CID);
                preparedStatement.setString(3, "Accepted");
                preparedStatement.setString(4, RNAME);
                preparedStatement.setString(5, Adate);    
                preparedStatement.setString(6, Title);  
                preparedStatement.setString(7, s_msg); 
                preparedStatement.executeUpdate();
                stUP();
                work2();
                tb_update();
                JOptionPane.showMessageDialog(null, "Updated successfully!");
                reset();
            } catch (SQLException ex) {
                Logger.getLogger(Bills_m.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_solvedMouseClicked

    private void printActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_printActionPerformed
        MessageFormat head=new MessageFormat(
            "**** Problems List ****"
        );
        MessageFormat foot=new MessageFormat("Page{0, number,integer}");
        try{
            p_tb.print(JTable.PrintMode.NORMAL, head, foot);
        }catch(java.awt.print.PrinterException e)
        {
            JOptionPane.showMessageDialog(null, "Errors:"+e);
        }
    }//GEN-LAST:event_printActionPerformed

    private void resetMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_resetMouseClicked
    reset();
    }//GEN-LAST:event_resetMouseClicked

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(solution.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(solution.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(solution.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(solution.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new solution().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JCheckBox CCID;
    private javax.swing.JCheckBox PID;
    private com.toedter.calendar.JDateChooser adate;
    private javax.swing.JLabel bg;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JLabel cid;
    private javax.swing.JLabel exit;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JLabel min;
    private javax.swing.JLabel move;
    private javax.swing.JTable p_tb;
    private javax.swing.JLabel pid;
    private javax.swing.JButton print;
    private javax.swing.JTextArea problem;
    private javax.swing.JLabel reset;
    private javax.swing.JLabel sdate;
    private javax.swing.JTextField search;
    private javax.swing.JTextArea solution_msg;
    private javax.swing.JLabel solved;
    private javax.swing.JLabel solver;
    private javax.swing.JLabel status;
    private javax.swing.JLabel title;
    // End of variables declaration//GEN-END:variables
Connection con=null;
String ProblemsID="",RNAME,Adate,s_msg,Title,STatus,CID,PSID;
    private void connection()
    {
     try{
            Class.forName("com.mysql.jdbc.Driver");
            con=(Connection) DriverManager.getConnection("jdbc:mysql://localhost/cms", "root", "");
        }catch(Exception ex){
          
        }
    }
 private void reset()
{
    cid.setText(null);
    pid.setText(null);
    title.setText(null);
    solution_msg.setText(null);
    status.setText(null);
    solver.setText(null);
    sdate.setText(null);
    problem.setText(null);
    ProblemsID="";
}
 private boolean allValid() {
     //RNAME,Adate,s_msg,Title,STatus,CID,PSID;
        CID=cid.getText();
        Title=title.getText();
        PSID=pid.getText();
        s_msg=solution_msg.getText();
        STatus=status.getText();
        RNAME=solver.getText();
        Adate=((JTextField)adate.getDateEditor().getUiComponent()).getText();
        if(s_msg.equalsIgnoreCase(""))
        {
            //alert.setText("* Client ID not valid");
            JOptionPane.showMessageDialog(null, "Enter valid Solution! ! !");
            return false;
        }
        else if(Adate.equalsIgnoreCase(""))
        {
            //alert.setText("* Email not Bandwidth !");
            JOptionPane.showMessageDialog(null, "Enter valid Answering Date! ! !");
            return false;
        }
        else{
            return true;
        }
    }
 private void stUP()
 {
     String sql="Update problems set status='Solved' where pid='"+PSID+"'";
    
        try{
            
                connection();
                Statement st=null;
                st=con.createStatement();
                st.executeUpdate(sql);
          //  JOptionPane.showConfirmDialog(this,"Information is successfuly updated.","Confermation message",JOptionPane.OK_CANCEL_OPTION,JOptionPane.INFORMATION_MESSAGE,new ImageIcon("thik_mark.png"));
        }catch(SQLException e){
            JOptionPane.showMessageDialog(this, e);
        }
 }
 private void profile_info()
{
    try {
            String sql="Select * from userinfo where Email='"+FileReadWrite.FileOutput("files//name")+"'";
            PreparedStatement st=null;
            ResultSet rs=null;
            try {
                connection();
                st=con.prepareStatement(sql);
                rs=st.executeQuery();
            if(rs.next())
            {
                RNAME=rs.getString(2);
            }
            } catch (SQLException ex) {
                Logger.getLogger(profile.class.getName()).log(Level.SEVERE, null, ex);
            }
            
        } catch (FileNotFoundException ex) {
            Logger.getLogger(profile.class.getName()).log(Level.SEVERE, null, ex);
        }
}
 private void onclick(){
        int row=p_tb.getSelectedRow();
        ProblemsID=(p_tb.getModel().getValueAt(row, 0).toString());
        cid.setText(p_tb.getModel().getValueAt(row, 1).toString());
        pid.setText(ProblemsID);
        profile_info();
        title.setText(p_tb.getModel().getValueAt(row, 2).toString());
        problem.setText(p_tb.getModel().getValueAt(row, 3).toString());
        sdate.setText(p_tb.getModel().getValueAt(row, 4).toString());
        status.setText(p_tb.getModel().getValueAt(row, 5).toString());
        solver.setText(RNAME);
    }
private void tb_update(){
 
            try {
                connection();
                model = (DefaultTableModel) p_tb.getModel();   
                PreparedStatement st = null;
                String sql = "Select * from problems where status<>'Solved'";
            st= con.prepareStatement(sql);
            ResultSet res = null;
            res = st.executeQuery();       
            while(res.next())
            {
                 String a[] = {res.getString(1),res.getString(2),
                 res.getString(3), res.getString(4),res.getString(5),res.getString(6)};              
                model.insertRow(model.getRowCount(), a);
            }
        }catch(SQLException e)
        {
           System.out.print(e);
        }
    }
private void search()
    {
        if(search.getText().trim().length()!=0){
            try {
                connection();
            model = (DefaultTableModel) p_tb.getModel();
            PreparedStatement st = null;
            String sql;
            if(CCID.isSelected()){
                sql= "Select * from problems where cid LIKE '%"+search.getText()+"%' and status<>'Solved'"; 
            }
            else{
                sql="Select * from problems where pid LIKE '%"+search.getText()+"%' and status<>'Solved'";
            }
            st= con.prepareStatement(sql);
            ResultSet res = null;
            res = st.executeQuery();       
            while(res.next())
            {
                String a[] = {res.getString(1),res.getString(2),
                 res.getString(3), res.getString(4),res.getString(5),res.getString(6)};              
                model.insertRow(model.getRowCount(), a);
            }
            
        }catch(SQLException e){
            
        }
        }
        else if(search.getText().equalsIgnoreCase(""))
        {
            work2();
            tb_update(); 
        }
}
private void work2()
    {
        model.setRowCount(0);
    }
 //end tag

}
