/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package interface_input;

import all_classes.FileReadWrite;
import interface_output.profile;
import java.awt.Cursor;
import java.io.FileNotFoundException;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.text.MessageFormat;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.ImageIcon;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author user
 */
public class BUpdate extends javax.swing.JFrame {

    /**
     * Creates new form BUpdate
     */
    int mX,mY;
    DefaultTableModel model = new DefaultTableModel(); 
    public BUpdate() {
        initComponents();
        ImageIcon img=new ImageIcon("img\\cms.png");
        this.setIconImage(img.getImage());
        CCID.setSelected(true);
        work2();
        tb_update();
        move.setCursor(new Cursor(Cursor.MOVE_CURSOR));
        exit.setCursor(new Cursor(Cursor.HAND_CURSOR));
        min.setCursor(new Cursor(Cursor.HAND_CURSOR));
        print.setCursor(new Cursor(Cursor.HAND_CURSOR));
        update.setCursor(new Cursor(Cursor.HAND_CURSOR));
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        move = new javax.swing.JLabel();
        min = new javax.swing.JLabel();
        search = new javax.swing.JTextField();
        date = new javax.swing.JTextField();
        cid = new javax.swing.JTextField();
        solver = new javax.swing.JTextField();
        cband = new javax.swing.JTextField();
        pband = new javax.swing.JTextField();
        exit = new javax.swing.JLabel();
        update = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        band_up = new javax.swing.JTable();
        print = new javax.swing.JLabel();
        type = new javax.swing.JComboBox();
        CCID = new javax.swing.JCheckBox();
        CSL = new javax.swing.JCheckBox();
        bg = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setUndecorated(true);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        move.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseDragged(java.awt.event.MouseEvent evt) {
                moveMouseDragged(evt);
            }
        });
        move.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                moveMousePressed(evt);
            }
        });
        getContentPane().add(move, new org.netbeans.lib.awtextra.AbsoluteConstraints(4, 0, 640, 20));

        min.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                minMouseClicked(evt);
            }
        });
        getContentPane().add(min, new org.netbeans.lib.awtextra.AbsoluteConstraints(650, 0, 21, 30));

        search.setBackground(new java.awt.Color(59, 62, 136));
        search.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        search.setForeground(new java.awt.Color(255, 255, 255));
        search.setToolTipText("search by client id");
        search.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        search.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                searchKeyReleased(evt);
            }
        });
        getContentPane().add(search, new org.netbeans.lib.awtextra.AbsoluteConstraints(396, 27, 210, 30));

        date.setBackground(new java.awt.Color(35, 33, 24));
        date.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        date.setForeground(new java.awt.Color(102, 255, 51));
        date.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        getContentPane().add(date, new org.netbeans.lib.awtextra.AbsoluteConstraints(130, 277, 235, 30));

        cid.setBackground(new java.awt.Color(35, 33, 24));
        cid.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        cid.setForeground(new java.awt.Color(102, 255, 51));
        cid.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        getContentPane().add(cid, new org.netbeans.lib.awtextra.AbsoluteConstraints(129, 68, 240, 30));

        solver.setBackground(new java.awt.Color(35, 33, 24));
        solver.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        solver.setForeground(new java.awt.Color(102, 255, 51));
        solver.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        getContentPane().add(solver, new org.netbeans.lib.awtextra.AbsoluteConstraints(112, 330, 255, 30));

        cband.setBackground(new java.awt.Color(35, 33, 24));
        cband.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        cband.setForeground(new java.awt.Color(102, 255, 51));
        cband.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        getContentPane().add(cband, new org.netbeans.lib.awtextra.AbsoluteConstraints(178, 122, 190, 30));

        pband.setBackground(new java.awt.Color(35, 33, 24));
        pband.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        pband.setForeground(new java.awt.Color(102, 255, 51));
        pband.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        getContentPane().add(pband, new org.netbeans.lib.awtextra.AbsoluteConstraints(192, 172, 175, 30));

        exit.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                exitMouseClicked(evt);
            }
        });
        getContentPane().add(exit, new org.netbeans.lib.awtextra.AbsoluteConstraints(680, 0, 30, 27));

        update.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                updateMouseClicked(evt);
            }
        });
        getContentPane().add(update, new org.netbeans.lib.awtextra.AbsoluteConstraints(168, 372, 200, 50));

        band_up.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Sl", "ClientID", "Proposed Bandwidth", "Date", "Type"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, true, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        band_up.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                band_upMouseClicked(evt);
            }
        });
        band_up.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                band_upKeyReleased(evt);
            }
        });
        jScrollPane1.setViewportView(band_up);

        getContentPane().add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(390, 80, 320, 350));

        print.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                printMouseClicked(evt);
            }
        });
        getContentPane().add(print, new org.netbeans.lib.awtextra.AbsoluteConstraints(610, 30, 100, 50));

        type.setBackground(new java.awt.Color(35, 33, 24));
        type.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Shared", "Dedicated" }));
        type.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        getContentPane().add(type, new org.netbeans.lib.awtextra.AbsoluteConstraints(192, 224, 175, 30));

        buttonGroup1.add(CCID);
        CCID.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        CCID.setText("By CID");
        CCID.setOpaque(false);
        getContentPane().add(CCID, new org.netbeans.lib.awtextra.AbsoluteConstraints(480, 55, -1, -1));

        buttonGroup1.add(CSL);
        CSL.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        CSL.setText("By SL");
        CSL.setOpaque(false);
        getContentPane().add(CSL, new org.netbeans.lib.awtextra.AbsoluteConstraints(400, 54, -1, -1));

        bg.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/Bandwidthupdate.png"))); // NOI18N
        getContentPane().add(bg, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 720, 430));

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void moveMouseDragged(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_moveMouseDragged
        // TODO add your handling code here:
        int x=evt.getXOnScreen();
        int y=evt.getYOnScreen();
        this.setLocation(x-mX, y-mY);
    }//GEN-LAST:event_moveMouseDragged

    private void moveMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_moveMousePressed
        // TODO add your handling code here:
        mX=evt.getX();
        mY=evt.getY();
    }//GEN-LAST:event_moveMousePressed

    private void minMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_minMouseClicked
        // TODO add your handling code here:
        this.setExtendedState(BUpdate.ICONIFIED);
    }//GEN-LAST:event_minMouseClicked

    private void exitMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_exitMouseClicked
        // TODO add your handling code here:
        this.dispose();
    }//GEN-LAST:event_exitMouseClicked

    private void searchKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_searchKeyReleased
     work2();
     search();
    }//GEN-LAST:event_searchKeyReleased

    private void printMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_printMouseClicked
        MessageFormat head=new MessageFormat(
            "**** History Bandwidth Update ****"
    );
     MessageFormat foot=new MessageFormat("Page{0, number,integer}");
     try{
         band_up.print(JTable.PrintMode.NORMAL, head, foot);
     }catch(java.awt.print.PrinterException e)
     {
         JOptionPane.showMessageDialog(null, "Errors:"+e);
     }
    }//GEN-LAST:event_printMouseClicked

    private void band_upMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_band_upMouseClicked
     onclick();
    }//GEN-LAST:event_band_upMouseClicked

    private void band_upKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_band_upKeyReleased
    onclick();
    }//GEN-LAST:event_band_upKeyReleased

    private void updateMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_updateMouseClicked
        try {
                connection();
                String sql="insert into bandwidthhistory(cid,currentB,proposedB,type,date,doneBy) values(?,?,?,?,?,?)";
                PreparedStatement preparedStatement = con.prepareStatement(sql);
                preparedStatement.setString(1, cid.getText());
                preparedStatement.setString(2, cband.getText());
                preparedStatement.setString(3, pband.getText());
                preparedStatement.setString(4, type.getSelectedItem().toString());
                preparedStatement.setString(5, date.getText()); 
                preparedStatement.setString(6, RNAME); 
                preparedStatement.executeUpdate();
                
            } catch (SQLException ex) {
                Logger.getLogger(Register.class.getName()).log(Level.SEVERE, null, ex);
            }
        {
        
            String sql="Update clientinfo set type='"+(type.getSelectedItem()).toString()+"', bandwidth='"+
              pband.getText()+"' where cid='"+cid.getText()+"' ";
            System.out.print(sql);
        try{
            
            connection();
                Statement st=null;
                st=con.createStatement();
                st.executeUpdate(sql);
                JOptionPane.showConfirmDialog(this,"Information is successfuly updated.","Confermation message",JOptionPane.OK_CANCEL_OPTION,JOptionPane.INFORMATION_MESSAGE,new ImageIcon("img//thik_mark.png"));
        }catch(SQLException e){
            JOptionPane.showMessageDialog(this, e);
        }
        
        }
        deleteEntry();
    }//GEN-LAST:event_updateMouseClicked

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(BUpdate.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(BUpdate.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(BUpdate.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(BUpdate.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new BUpdate().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JCheckBox CCID;
    private javax.swing.JCheckBox CSL;
    private javax.swing.JTable band_up;
    private javax.swing.JLabel bg;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JTextField cband;
    private javax.swing.JTextField cid;
    private javax.swing.JTextField date;
    private javax.swing.JLabel exit;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel min;
    private javax.swing.JLabel move;
    private javax.swing.JTextField pband;
    private javax.swing.JLabel print;
    private javax.swing.JTextField search;
    private javax.swing.JTextField solver;
    private javax.swing.JComboBox type;
    private javax.swing.JLabel update;
    // End of variables declaration//GEN-END:variables
Connection con=null;
String SL,RNAME;
    private void connection()
    {
     try{
            Class.forName("com.mysql.jdbc.Driver");
            con=(Connection) DriverManager.getConnection("jdbc:mysql://localhost/cms", "root", "");
        }catch(Exception ex){
          
        }
    }
 private void profile_info()
{
    try {
            String sql="Select * from userinfo where Email='"+FileReadWrite.FileOutput("files//name")+"'";
            PreparedStatement st=null;
            ResultSet rs=null;
            try {
                connection();
                st=con.prepareStatement(sql);
                rs=st.executeQuery();
            if(rs.next())
            {
                RNAME=rs.getString(2);
            }
            } catch (SQLException ex) {
                Logger.getLogger(profile.class.getName()).log(Level.SEVERE, null, ex);
            }
            
        } catch (FileNotFoundException ex) {
            Logger.getLogger(profile.class.getName()).log(Level.SEVERE, null, ex);
        }
}
 private void reset()
{
    cid.setText(null);
    cband.setText(null);
    pband.setText(null);
    solver.setText(null);
    date.setText(null);
    type.setSelectedIndex(0);
    
}
 private String cbandwidth(String id)
 {
     String BW="N/A";
        try {
            connection();
            PreparedStatement st = null;
            String sql = "Select * from clientinfo where cid='"+id+"'";
            st= con.prepareStatement(sql);
            ResultSet res = null;
            res = st.executeQuery();
            while(res.next()){
                BW=res.getString(9);
            }
        } catch (SQLException ex) {
        }
        return BW;
 }
 private void onclick(){
                int row=band_up.getSelectedRow();     
                SL=(band_up.getModel().getValueAt(row, 0).toString());
            try {
                connection();        
                PreparedStatement st = null;
                String sql = "Select * from bandwidth_update where sl='"+SL+"'";
                st= con.prepareStatement(sql);
                ResultSet res = null;
                res = st.executeQuery();       
                while(res.next()){
                   cid.setText(res.getString(2));
                   cband.setText(cbandwidth(cid.getText()));
                   pband.setText(res.getString(4));
                   date.setText(res.getString(5));
                   profile_info();
                   solver.setText(RNAME);
                   String sh=res.getString(6);
                   
                   if(sh.equalsIgnoreCase("Shared"))
                   {
                       type.setSelectedIndex(0);
                   }
                   else
                   {
                       type.setSelectedIndex(1);
                   }

                }
        }catch(SQLException e)
        {
           System.out.print(e);
        }
    }
private void tb_update(){
 
            try {
                connection();
                model = (DefaultTableModel) band_up.getModel();   
                PreparedStatement st = null;
                String sql = "Select * from bandwidth_update";
            st= con.prepareStatement(sql);
            ResultSet res = null;
            res = st.executeQuery();       
            while(res.next())
            {
                 String a[] = {res.getString(1), res.getString(2),
                    res.getString(4),res.getString(5), res.getString(6)};              
                model.insertRow(model.getRowCount(), a);
            }
        }catch(SQLException e)
        {
           System.out.print(e);
        }
    }
private void search()
    {
        if(search.getText().trim().length()!=0){
            try {
                connection();
            model = (DefaultTableModel) band_up.getModel();
            PreparedStatement st = null;
            String sql;
            if(CCID.isSelected()){
                sql= "Select * from bandwidth_update where cid LIKE '%"+search.getText()+"%' "; 
            }
            else{
                sql="Select * from bandwidth_update where sl LIKE '%"+search.getText()+"%' ";
            }
            st= con.prepareStatement(sql);
            ResultSet res = null;
            res = st.executeQuery();       
            while(res.next())
            {
               String a[] = {res.getString(1), res.getString(2),
                    res.getString(4),res.getString(5), res.getString(6)};              
                model.insertRow(model.getRowCount(), a);
            }
            
        }catch(SQLException e){
            
        }
        }
        else if(search.getText().equalsIgnoreCase(""))
        {
            work2();
            tb_update(); 
        }
}
private void work2()
    {
        model.setRowCount(0);
    }
private void deleteEntry()
{
        connection();
        String sql="DELETE from bandwidth_update where sl= '"+SL+"'";
        try{
            PreparedStatement st=null;
            st=con.prepareStatement(sql);
            st.executeUpdate();
            reset();
            work2();
            tb_update();
        }catch(SQLException e){

        } 
}
 //end tag
    
    
}
